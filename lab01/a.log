*** IR Dump Before Pre-ISel Intrinsic Lowering ***; ModuleID = 'jx.ll'
source_filename = "jx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_jx.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare i32 @scanf(i8*, ...) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Pre-ISel Intrinsic Lowering ***; ModuleID = 'jx.ll'
source_filename = "jx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_jx.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare i32 @scanf(i8*, ...) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; <label>:20:                                     ; preds = %15, %5
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; Loop:
; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; Exit blocks
.loopexit:                                        ; preds = %5
  br label %20

; <label>:15:                                     ; preds = %9
  br label %20
*** IR Dump After Loop Strength Reduction ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; Loop:
; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

; Exit blocks
.loopexit:                                        ; preds = %5
  br label %20

; <label>:15:                                     ; preds = %9
  br label %20
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Rewrite Symbols ***; ModuleID = 'jx.ll'
source_filename = "jx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_jx.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare i32 @scanf(i8*, ...) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'jx.ll'
source_filename = "jx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_jx.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare i32 @scanf(i8*, ...) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Tail Duplication ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Slot index numbering ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY %3; GR64:%3
208B		%rsi = COPY %1; GR64:%1
224B		%rdx = COPY %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		%6:gr32 = COPY %eax; GR32:%6
288B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY %3; GR64:%3
208B		%rsi = COPY %1; GR64:%1
224B		%rdx = COPY %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		%6:gr32 = COPY %eax; GR32:%6
288B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%6:gr32 = COPY %eax; GR32:%6
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine code sinking ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY %3; GR64:%3
	%rsi = COPY %1; GR64:%1
	%rdx = COPY %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %rdi, implicit %rsi, implicit %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
	%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
	%rdi = COPY %1; GR64:%1
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
	%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
	%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
	%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
	%rdi = COPY killed %3; GR64:%3
	%rsi = COPY killed %1; GR64:%1
	%rdx = COPY killed %5; GR64:%5
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Slot index numbering ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY killed %3; GR64:%3
208B		%rsi = COPY killed %1; GR64:%1
224B		%rdx = COPY killed %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, killed %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, killed %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, killed %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY killed %3; GR64:%3
208B		%rsi = COPY killed %1; GR64:%1
224B		%rdx = COPY killed %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY %3; GR64:%3
208B		%rsi = COPY %1; GR64:%1
224B		%rdx = COPY %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		%0:gr32 = MOV32ri64 @_ZStL8__ioinit; GR32:%0
48B		%1:gr64 = SUBREG_TO_REG 0, %0, sub_32bit; GR64:%1 GR32:%0
64B		%rdi = COPY %1; GR64:%1
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
128B		%2:gr32 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev; GR32:%2
144B		%3:gr64 = SUBREG_TO_REG 0, %2, sub_32bit; GR64:%3 GR32:%2
160B		%4:gr32 = MOV32ri64 @__dso_handle; GR32:%4
176B		%5:gr64 = SUBREG_TO_REG 0, %4, sub_32bit; GR64:%5 GR32:%4
192B		%rdi = COPY %3; GR64:%3
208B		%rsi = COPY %1; GR64:%1
224B		%rdx = COPY %5; GR64:%5
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
80B		CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
96B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
112B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
192B		dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
208B		dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
224B		dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
240B		CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
272B		RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Tail Duplication ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri64 @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri64 @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	dead %edi = MOV32ri @_ZStL8__ioinit, implicit-def %rdi
	CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit-def %rsp, implicit-def %ssp
	dead %edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def %rdi
	dead %esi = MOV32ri @_ZStL8__ioinit, implicit-def %rsi
	dead %edx = MOV32ri @__dso_handle, implicit-def %rdx
	CALL64pcrel32 @__cxa_atexit, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %rdi, implicit killed %rsi, implicit killed %rdx, implicit-def %rsp, implicit-def %ssp, implicit-def dead %eax
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function __cxx_global_var_init.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define i32 @_Z3jiei(i32) #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 2, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %17, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %5
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul nsw i32 %11, %10
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sgt i32 %13, 9999
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %9
  br label %20

; <label>:16:                                     ; preds = %9
  br label %17

; <label>:17:                                     ; preds = %16
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %5

.loopexit:                                        ; preds = %5
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %15
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness

# End machine code for function _Z3jiei.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Tail Duplication ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY %edi; GR32:%0
32B		%1:gr32 = COPY killed %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
208B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
224B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
240B		JLE_1 %bb.4, implicit %eflags
	    Successors according to CFG: %bb.4 %bb.3

256B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
272B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

288B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
304B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

320B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
336B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
352B		%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
368B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
384B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

400B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
416B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

432B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
448B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
464B		%eax = COPY %16; GR32:%16
480B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY %edi; GR32:%0
32B		%1:gr32 = COPY killed %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
208B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
224B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
240B		JLE_1 %bb.4, implicit %eflags
	    Successors according to CFG: %bb.4 %bb.3

256B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
272B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

288B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
304B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

320B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
336B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
352B		%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
368B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
384B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

400B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
416B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

432B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
448B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
464B		%eax = COPY %16; GR32:%16
480B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine code sinking ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY %16; GR32:%16
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def dead %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z3jiei: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def dead %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def dead %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = IMUL32rm killed %10, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9,%10
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = ADD32ri8 killed %14, 1, implicit-def dead %eflags; GR32:%13,%14
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = COPY killed %10; GR32:%9,%10
	%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = COPY killed %14; GR32:%13,%14
	%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	%0:gr32 = COPY killed %edi; GR32:%0
	%1:gr32 = COPY killed %0; GR32:%1,%0
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
	%9:gr32 = COPY killed %10; GR32:%9,%10
	%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
	%13:gr32 = COPY killed %14; GR32:%13,%14
	%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
	%eax = COPY killed %16; GR32:%16
	RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY killed %edi; GR32:%0
32B		%1:gr32 = COPY killed %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = COPY killed %10; GR32:%9,%10
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
368B		%13:gr32 = COPY killed %14; GR32:%13,%14
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY killed %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY killed %edi; GR32:%0
32B		%1:gr32 = COPY killed %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm killed %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = COPY killed %10; GR32:%9,%10
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
368B		%13:gr32 = COPY killed %14; GR32:%13,%14
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY killed %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY %edi; GR32:%0
32B		%1:gr32 = COPY %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = COPY %10; GR32:%9,%10
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
368B		%13:gr32 = COPY %14; GR32:%13,%14
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%0:gr32 = COPY %edi; GR32:%0
32B		%1:gr32 = COPY %0; GR32:%1,%0
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%10:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%10
192B		%9:gr32 = COPY %10; GR32:%9,%10
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%14:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%14
368B		%13:gr32 = COPY %14; GR32:%13,%14
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit killed %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi in %0

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
16B		%1:gr32 = COPY %edi; GR32:%1
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, %1; mem:ST4[%2] GR32:%1
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		%4:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
128B		CMP32rm %4, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2] GR32:%4
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		%9:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%9
208B		%9:gr32 = IMUL32rm %9, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3] GR32:%9
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, %9; mem:ST4[%3] GR32:%9
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		%13:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%13
384B		%13:gr32 = ADD32ri8 %13, 1, implicit-def dead %eflags; GR32:%13
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, %13; mem:ST4[%4] GR32:%13
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		%16:gr32 = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%16
496B		%eax = COPY %16; GR32:%16
512B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
128B		CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
208B		renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
384B		renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
512B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

0B	%bb.0: derived from LLVM BB %1
	    Live Ins: %edi
48B		MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
64B		MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
80B		MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
	    Successors according to CFG: %bb.1

96B	%bb.1: derived from LLVM BB %5
	    Predecessors according to CFG: %bb.0 %bb.5
112B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
128B		CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
144B		JG_1 %bb.6, implicit killed %eflags
	    Successors according to CFG: %bb.6 %bb.2

160B	%bb.2: derived from LLVM BB %9
	    Predecessors according to CFG: %bb.1
176B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
208B		renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
224B		MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
240B		CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
256B		JLE_1 %bb.4, implicit killed %eflags
	    Successors according to CFG: %bb.4 %bb.3

272B	%bb.3: derived from LLVM BB %15
	    Predecessors according to CFG: %bb.2
288B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

304B	%bb.4: derived from LLVM BB %16
	    Predecessors according to CFG: %bb.2
320B		JMP_1 %bb.5
	    Successors according to CFG: %bb.5

336B	%bb.5: derived from LLVM BB %17
	    Predecessors according to CFG: %bb.4
352B		renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
384B		renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
400B		MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
416B		JMP_1 %bb.1
	    Successors according to CFG: %bb.1

432B	%bb.6: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: %bb.1
448B		JMP_1 %bb.7
	    Successors according to CFG: %bb.7

464B	%bb.7: derived from LLVM BB %20
	    Predecessors according to CFG: %bb.6 %bb.3
480B		renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
512B		RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	MOV32mr %stack.0, 1, %noreg, 0, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %stack.1, 1, %noreg, 0, %noreg, 1; mem:ST4[%3]
	MOV32mi %stack.2, 1, %noreg, 0, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %stack.0, 1, %noreg, 0, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %stack.1, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %stack.1, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %stack.1, 1, %noreg, 0, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %stack.2, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %stack.1, 1, %noreg, 0, %noreg; mem:LD4[%3]
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Tail Duplication ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z3jiei: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %edi

%bb.0: derived from LLVM BB %1
    Live Ins: %edi
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	MOV32mr %rbp, 1, %noreg, -12, %noreg, killed renamable %edi; mem:ST4[%2]
	MOV32mi %rbp, 1, %noreg, -8, %noreg, 1; mem:ST4[%3]
	MOV32mi %rbp, 1, %noreg, -4, %noreg, 2; mem:ST4[%4]
    Successors according to CFG: %bb.1

%bb.1: derived from LLVM BB %5
    Predecessors according to CFG: %bb.0 %bb.5
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	CMP32rm killed renamable %eax, %rbp, 1, %noreg, -12, %noreg, implicit-def %eflags; mem:LD4[%2]
	JG_1 %bb.6, implicit killed %eflags
    Successors according to CFG: %bb.6 %bb.2

%bb.2: derived from LLVM BB %9
    Predecessors according to CFG: %bb.1
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = IMUL32rm killed renamable %eax, %rbp, 1, %noreg, -8, %noreg, implicit-def dead %eflags; mem:LD4[%3]
	MOV32mr %rbp, 1, %noreg, -8, %noreg, killed renamable %eax; mem:ST4[%3]
	CMP32mi %rbp, 1, %noreg, -8, %noreg, 9999, implicit-def %eflags; mem:LD4[%3]
	JLE_1 %bb.4, implicit killed %eflags
    Successors according to CFG: %bb.4 %bb.3

%bb.3: derived from LLVM BB %15
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.4: derived from LLVM BB %16
    Predecessors according to CFG: %bb.2
	JMP_1 %bb.5
    Successors according to CFG: %bb.5

%bb.5: derived from LLVM BB %17
    Predecessors according to CFG: %bb.4
	renamable %eax = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	renamable %eax = ADD32ri8 killed renamable %eax, 1, implicit-def dead %eflags
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	JMP_1 %bb.1
    Successors according to CFG: %bb.1

%bb.6: derived from LLVM BB %.loopexit
    Predecessors according to CFG: %bb.1
	JMP_1 %bb.7
    Successors according to CFG: %bb.7

%bb.7: derived from LLVM BB %20
    Predecessors according to CFG: %bb.6 %bb.3
	renamable %eax = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function _Z3jiei.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #5 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %3)
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @_Z3jiei(i32 %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		%13:gr32 = COPY %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		%11:gr32 = COPY %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		%3:gr32 = COPY %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
560B		%eax = COPY %0; GR32:%0
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		%13:gr32 = COPY %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		%11:gr32 = COPY %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		%3:gr32 = COPY %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
560B		%eax = COPY %0; GR32:%0
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%13:gr32 = COPY %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %9; GR64:%9
	%rsi = COPY %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%11:gr32 = COPY %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY %1; GR64:%1
	%esi = COPY %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%3:gr32 = COPY %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def %eflags; GR32:%0
	%eax = COPY %0; GR32:%0
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	%12:gr64 = MOV64ri @.str; GR64:%12
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %12; GR64:%12
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %13:gr32 = COPY killed %eax; GR32:%13
	%9:gr64 = MOV64ri @.str.1; GR64:%9
	%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %9; GR64:%9
	%rsi = COPY killed %10; GR64:%10
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %11:gr32 = COPY killed %eax; GR32:%11
	%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%edi = COPY killed %8; GR32:%8
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%7:gr32 = COPY killed %eax; GR32:%7
	%1:gr64 = MOV64ri @.str.1; GR64:%1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
	%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%rdi = COPY killed %1; GR64:%1
	%esi = COPY killed %4; GR32:%4
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	dead %3:gr32 = COPY killed %eax; GR32:%3
	%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
	%eax = COPY killed %0; GR32:%0
	RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY killed %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY killed %9; GR64:%9
208B		%rsi = COPY killed %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY killed %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY killed %1; GR64:%1
464B		%esi = COPY killed %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
560B		%eax = COPY killed %0; GR32:%0
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY killed %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY killed %9; GR64:%9
208B		%rsi = COPY killed %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY killed %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY killed %1; GR64:%1
464B		%esi = COPY killed %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
560B		%eax = COPY killed %0; GR32:%0
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
560B		%eax = COPY %0; GR32:%0
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
544B		%0:gr32 = MOV32r0 implicit-def dead %eflags; GR32:%0
560B		%eax = COPY %0; GR32:%0
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY killed %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY killed %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY killed %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit killed %al, implicit killed %rdi, implicit killed %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY killed %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit killed %eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		%12:gr64 = MOV64ri @.str; GR64:%12
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
64B		%rdi = COPY %12; GR64:%12
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
128B		dead %13:gr32 = COPY %eax; GR32:%13
144B		%9:gr64 = MOV64ri @.str.1; GR64:%9
160B		%10:gr64 = LEA64r %stack.2, 1, %noreg, 0, %noreg; GR64:%10
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
192B		%rdi = COPY %9; GR64:%9
208B		%rsi = COPY %10; GR64:%10
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
272B		dead %11:gr32 = COPY %eax; GR32:%11
288B		%8:gr32 = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3] GR32:%8
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
320B		%edi = COPY %8; GR32:%8
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
368B		%7:gr32 = COPY %eax; GR32:%7
384B		%1:gr64 = MOV64ri @.str.1; GR64:%1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, %7; mem:ST4[%4] GR32:%7
416B		%4:gr32 = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%4
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
448B		%rdi = COPY %1; GR64:%1
464B		%esi = COPY %4; GR32:%4
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
528B		dead %3:gr32 = COPY %eax; GR32:%3
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		renamable %rdi = MOV64ri @.str
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
144B		renamable %rdi = MOV64ri @.str.1
160B		renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
288B		renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
384B		renamable %rdi = MOV64ri @.str.1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
416B		renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	%bb.0: derived from LLVM BB %0
16B		renamable %rdi = MOV64ri @.str
32B		MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
48B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
80B		%al = MOV8ri 0
96B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
112B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
144B		renamable %rdi = MOV64ri @.str.1
160B		renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
176B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
224B		%al = MOV8ri 0
240B		CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
256B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
288B		renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
304B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
336B		CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
352B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
384B		renamable %rdi = MOV64ri @.str.1
400B		MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
416B		renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
432B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
480B		%al = MOV8ri 0
496B		CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
512B		ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
560B		%eax = MOV32r0 implicit-def dead %eflags
576B		RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

%bb.0: derived from LLVM BB %0
	renamable %rdi = MOV64ri @.str
	MOV32mi %stack.0, 1, %noreg, 0, %noreg, 0; mem:ST4[%1]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %stack.2, 1, %noreg, 0, %noreg
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %edi = MOV32rm %stack.2, 1, %noreg, 0, %noreg; mem:LD4[%3]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %stack.3, 1, %noreg, 0, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %stack.3, 1, %noreg, 0, %noreg; mem:LD4[%4]
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	ADJCALLSTACKUP64 0, 0, implicit-def %rsp, implicit-def dead %eflags, implicit-def %ssp, implicit %rsp, implicit %ssp
	%eax = MOV32r0 implicit-def dead %eflags
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = MOV32r0 implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	%rsp = SUB64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameSetup
	renamable %rdi = MOV64ri @.str
	MOV32mi %rbp, 1, %noreg, -12, %noreg, 0; mem:ST4[%1]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	renamable %rsi = LEA64r %rbp, 1, %noreg, -8, %noreg
	%al = MOV8ri 0
	CALL64pcrel32 @scanf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %rsi, implicit-def %eax
	renamable %edi = MOV32rm %rbp, 1, %noreg, -8, %noreg; mem:LD4[%3]
	CALL64pcrel32 @_Z3jiei, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %edi, implicit-def %eax
	renamable %rdi = MOV64ri @.str.1
	MOV32mr %rbp, 1, %noreg, -4, %noreg, killed renamable %eax; mem:ST4[%4]
	renamable %esi = MOV32rm %rbp, 1, %noreg, -4, %noreg; mem:LD4[%4]
	%al = MOV8ri 0
	CALL64pcrel32 @printf, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit %al, implicit %rdi, implicit %esi, implicit-def %eax
	%eax = XOR32rr undef %eax, undef %eax, implicit-def dead %eflags
	%rsp = ADD64ri8 %rsp, 16, implicit-def dead %eflags; flags: FrameDestroy
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ implicit %eax

# End machine code for function main.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_jx.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Tail Duplication ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine code sinking ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: IsSSA, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Slot index numbering ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

0B	%bb.0: derived from LLVM BB %0
16B		ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
32B		CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
48B		ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
64B		RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs

%bb.0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	ADJCALLSTACKUP64 0, 0, implicit-def dead %rsp, implicit-def dead %eflags, implicit-def dead %ssp, implicit %rsp, implicit %ssp
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Tail Duplication ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RET 0

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _GLOBAL__sub_I_jx.cpp: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

%bb.0: derived from LLVM BB %0
	PUSH64r killed %rbp, implicit-def %rsp, implicit %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_offset 16
	CFI_INSTRUCTION offset %rbp, -16
	%rbp = MOV64rr %rsp; flags: FrameSetup
	CFI_INSTRUCTION def_cfa_register %rbp
	CALL64pcrel32 @__cxx_global_var_init, <regmask %bh %bl %bp %bpl %bx %ebp %ebx %rbp %rbx %r12 %r13 %r14 %r15 %r12b %r13b %r14b %r15b %r12d %r13d %r14d %r15d %r12w %r13w %r14w %r15w>, implicit %rsp, implicit %ssp, implicit-def %rsp, implicit-def %ssp
	%rbp = POP64r implicit-def %rsp, implicit %rsp; flags: FrameDestroy
	RETQ

# End machine code for function _GLOBAL__sub_I_jx.cpp.

